@page "/fetchdata"
@using BlazorDynamic365.Data
@inject WeatherForecastService ForecastService

@using Microsoft.Identity.Client;
@using Microsoft.Identity.Web
@using System.Text.Json;
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Identity.Web.ITokenAcquisition TokenAcquisitionService
@inject IConfiguration configuration;
@*@using MudBlazor.Examples.Data.Models;*@


<PageTitle>Dynamics 365 CRM</PageTitle>

<h1>Blazor Dynamics 365 CRM</h1>

<p>This component demonstrates fetching data from Dynamic 365 Customer service.</p>


@if (Values == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="Values.AsEnumerable()">

        <HeaderContent>
            <MudTh>Firstname</MudTh>
            <MudTh>Lastname</MudTh>
            <MudTh>Telephone</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Job Title</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="firstname">@context.firstname</MudTd>
            <MudTd DataLabel="lastname">@context.lastname</MudTd>
            <MudTd DataLabel="telephone1">@context.telephone1</MudTd>
            <MudTd DataLabel="emailaddress1">@context.emailaddress1</MudTd>
            <MudTd DataLabel="jobtitle">@context.jobtitle</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }" InfoFormat="@($"Left {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Left" HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />
            @*<MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }" InfoFormat="@($"Center {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center" HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />*@
        </PagerContent>
    </MudTable>
    
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hideRowsPerPage" Color="Color.Tertiary">Hide/Show Rows per Page</MudSwitch>
        <MudSwitch @bind-Checked="@hidePageNumber" Color="Color.Primary">Hide/Show Page Number</MudSwitch>
        <MudSwitch @bind-Checked="@hidePagination" Color="Color.Secondary">Hide/Show Pagination</MudSwitch>
    </div>
}

@code {

    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    //------
    private Value[]? Values;
    private HttpClient _httpClient;
    private string? Token;

    int Id = 1;

    protected override async Task OnInitializedAsync()
    {
        string baseUrl = configuration["DataverseConfig:BaseUri"];

         Token = await GetToken();

        // Set the auth token
        _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);

        // Send the request
        var dataRequest = await _httpClient.GetAsync($@"{baseUrl}api/data/v9.2/contacts?$select=firstname,lastname,telephone1,jobtitle,emailaddress1&$top=3000");

        if (dataRequest.IsSuccessStatusCode)
        {
            var jsonString = System.Text.Json.JsonDocument.Parse(await dataRequest.Content.ReadAsStreamAsync());
            var crmOject = JsonSerializer.Deserialize<Rootobject>(jsonString);
            Values = crmOject?.value;
        }
        else
        {
            throw new Exception("Error sending request.");
        }
    }

    private async Task<string> GetToken()
    {
        string baseUrl = configuration["DataverseConfig:BaseUri"];

        // Get the HttpClient
        _httpClient = HttpClientFactory.CreateClient();

        // Get the token
        var token = string.Empty;
        try
        {
            token = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { $"{baseUrl}user_impersonation" });
        }

        catch (MicrosoftIdentityWebChallengeUserException ex)
        {
            ConsentHandler.HandleException(ex);
        }
        catch (Exception)
        {
            throw new Exception("Error getting access token.");
        }
        await Task.Delay(100);

        return token;
    }

}
